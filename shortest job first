def sjf_scheduling(processes, burst_time, arrival_time):
    n = len(processes)
    completed = [False] * n
    time = 0
    ct, tat, wt = [0] * n, [0] * n, [0] * n
    completed_count = 0

    print("\n--- Shortest Job First Scheduling ---")

    while completed_count < n:
        idx = -1
        min_bt = float("inf")

        for i in range(n):
            if arrival_time[i] <= time and not completed[i]:
                if burst_time[i] < min_bt:
                    min_bt = burst_time[i]
                    idx = i

        if idx == -1:  # no process ready
            time += 1
            continue

    
        time += burst_time[idx]
        ct[idx] = time
        tat[idx] = ct[idx] - arrival_time[idx]
        wt[idx] = tat[idx] - burst_time[idx]
        completed[idx] = True
        completed_count += 1


    print("PID\tAT\tBT\tCT\tTAT\tWT")
    for i in range(n):
        print(f"P{processes[i]}\t{arrival_time[i]}\t{burst_time[i]}\t{ct[i]}\t{tat[i]}\t{wt[i]}")

    print(f"\nAverage TAT: {sum(tat)/n:.2f}")
    print(f"Average WT : {sum(wt)/n:.2f}")



sjf_scheduling([1, 2, 3], [6, 8, 7], [0, 1, 2])
